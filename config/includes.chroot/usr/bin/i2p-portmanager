#!/bin/bash

# I2P Port Manager with iptables
# Author: root0emir(Emir)

# Colors for terminal output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Security critical ports - NEVER expose these ports to internet
FORBIDDEN_PORTS=(7657 9150 4444 4445 7654 7652 7653 7655 7656 6668 2827 1900)

# Root user check
check_root() {
    if [[ $EUID -ne 0 ]]; then
        echo -e "${RED}[ERROR]${NC} This script must be run with root privileges!"
        echo "Usage: sudo $0"
        exit 1
    fi
}

# Forbidden port check
is_forbidden_port() {
    local port=$1
    for forbidden in "${FORBIDDEN_PORTS[@]}"; do
        if [[ $port -eq $forbidden ]]; then
            return 0
        fi
    done
    return 1
}

# Find I2P port from config files
get_i2p_port() {
    local i2p_config_paths=(
        "/opt/i2p/router.config"
        "/usr/share/i2p/router.config"
        "/home/*/.i2p/router.config"
        "/var/lib/i2p/i2p-config/router.config"
        "/etc/i2p/router.config"
        "/home/$USER/.i2p/router.config"
    )
    
    # Try different property names that I2P might use
    local port_properties=(
        "i2np.udp.port"
        "i2np.ntcp.port"
        "router.udpPort"
        "i2p.router.port"
    )
    
    for config_path in "${i2p_config_paths[@]}"; do
        # Handle wildcard expansion
        for actual_path in $config_path; do
            if [[ -f "$actual_path" ]]; then
                for property in "${port_properties[@]}"; do
                    local port=$(grep "^$property" "$actual_path" 2>/dev/null | cut -d'=' -f2 | tr -d ' ' | head -1)
                    if [[ -n $port && $port =~ ^[0-9]+$ && $port -ge 1024 && $port -le 65535 ]]; then
                        echo "$port"
                        return 0
                    fi
                done
            fi
        done
    done
    
    # Try to get port from running I2P process
    local running_port=$(netstat -tulpn 2>/dev/null | grep java | grep -oE ':[0-9]+' | grep -oE '[0-9]+' | head -1)
    if [[ -n $running_port && $running_port =~ ^[0-9]+$ && $running_port -ge 9000 && $running_port -le 31000 ]]; then
        echo "$running_port"
        return 0
    fi
    
    echo ""
    return 1
}

# Port opening function
open_port() {
    local port=$1
    local protocol=${2:-"both"}
    
    if is_forbidden_port "$port"; then
        echo -e "${RED}[SECURITY WARNING]${NC} Port $port cannot be opened for security reasons!"
        echo -e "${YELLOW}This port is designed for localhost access only.${NC}"
        return 1
    fi
    
    if [[ $port -lt 1 || $port -gt 65535 ]]; then
        echo -e "${RED}[ERROR]${NC} Invalid port number: $port"
        return 1
    fi
    
    echo -e "${BLUE}[INFO]${NC} Opening port $port ($protocol) for IPv4 + IPv6..."
    
    case $protocol in
        "tcp"|"TCP")
            # IPv4
            iptables -A INPUT -p tcp --dport "$port" -j ACCEPT
            # IPv6
            if command -v ip6tables >/dev/null 2>&1; then
                ip6tables -A INPUT -p tcp --dport "$port" -j ACCEPT
            fi
            ;;
        "udp"|"UDP")
            # IPv4
            iptables -A INPUT -p udp --dport "$port" -j ACCEPT
            # IPv6
            if command -v ip6tables >/dev/null 2>&1; then
                ip6tables -A INPUT -p udp --dport "$port" -j ACCEPT
            fi
            ;;
        "both"|"BOTH")
            # IPv4
            iptables -A INPUT -p tcp --dport "$port" -j ACCEPT
            iptables -A INPUT -p udp --dport "$port" -j ACCEPT
            # IPv6
            if command -v ip6tables >/dev/null 2>&1; then
                ip6tables -A INPUT -p tcp --dport "$port" -j ACCEPT
                ip6tables -A INPUT -p udp --dport "$port" -j ACCEPT
            fi
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Invalid protocol: $protocol (tcp, udp, both)"
            return 1
            ;;
    esac
    
    echo -e "${GREEN}[SUCCESS]${NC} Port $port opened successfully (IPv4 + IPv6)"
}

# Port closing function
close_port() {
    local port=$1
    local protocol=${2:-"both"}
    
    if [[ $port -lt 1 || $port -gt 65535 ]]; then
        echo -e "${RED}[ERROR]${NC} Invalid port number: $port"
        return 1
    fi
    
    echo -e "${BLUE}[INFO]${NC} Closing port $port ($protocol) for IPv4 + IPv6..."
    
    case $protocol in
        "tcp"|"TCP")
            # IPv4
            iptables -D INPUT -p tcp --dport "$port" -j ACCEPT 2>/dev/null
            # IPv6
            if command -v ip6tables >/dev/null 2>&1; then
                ip6tables -D INPUT -p tcp --dport "$port" -j ACCEPT 2>/dev/null
            fi
            ;;
        "udp"|"UDP")
            # IPv4
            iptables -D INPUT -p udp --dport "$port" -j ACCEPT 2>/dev/null
            # IPv6
            if command -v ip6tables >/dev/null 2>&1; then
                ip6tables -D INPUT -p udp --dport "$port" -j ACCEPT 2>/dev/null
            fi
            ;;
        "both"|"BOTH")
            # IPv4
            iptables -D INPUT -p tcp --dport "$port" -j ACCEPT 2>/dev/null
            iptables -D INPUT -p udp --dport "$port" -j ACCEPT 2>/dev/null
            # IPv6
            if command -v ip6tables >/dev/null 2>&1; then
                ip6tables -D INPUT -p tcp --dport "$port" -j ACCEPT 2>/dev/null
                ip6tables -D INPUT -p udp --dport "$port" -j ACCEPT 2>/dev/null
            fi
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Invalid protocol: $protocol (tcp, udp, both)"
            return 1
            ;;
    esac
    
    echo -e "${GREEN}[SUCCESS]${NC} Port $port closed successfully (IPv4 + IPv6)"
}

# Automatic setup of required I2P ports
setup_i2p_ports() {
    echo -e "${BLUE}[INFO]${NC} Configuring I2P network ports..."
    
    # Enable IP forwarding if needed (both IPv4 and IPv6)
    echo 1 > /proc/sys/net/ipv4/ip_forward 2>/dev/null || true
    echo 1 > /proc/sys/net/ipv6/conf/all/forwarding 2>/dev/null || true
    
    # Basic firewall rules for I2P (IPv4 + IPv6)
    echo -e "${BLUE}[INFO]${NC} Setting up basic firewall rules for IPv4 + IPv6..."
    
    # IPv4 Rules
    # Allow established and related connections
    iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    iptables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
    
    # Allow loopback traffic
    iptables -A INPUT -i lo -j ACCEPT
    iptables -A OUTPUT -o lo -j ACCEPT
    
    # Allow outbound connections for I2P
    iptables -A OUTPUT -p udp -j ACCEPT
    iptables -A OUTPUT -p tcp -j ACCEPT
    
    # IPv6 Rules (if ip6tables is available)
    if command -v ip6tables >/dev/null 2>&1; then
        echo -e "${BLUE}[INFO]${NC} Configuring IPv6 firewall rules..."
        
        # Allow established and related connections
        ip6tables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        ip6tables -A OUTPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
        
        # Allow loopback traffic
        ip6tables -A INPUT -i lo -j ACCEPT
        ip6tables -A OUTPUT -o lo -j ACCEPT
        
        # Allow outbound connections for I2P
        ip6tables -A OUTPUT -p udp -j ACCEPT
        ip6tables -A OUTPUT -p tcp -j ACCEPT
        
        # Allow ICMPv6 (essential for IPv6)
        ip6tables -A INPUT -p icmpv6 -j ACCEPT
        ip6tables -A OUTPUT -p icmpv6 -j ACCEPT
    fi
    
    # Find I2P main port
    local i2p_port=$(get_i2p_port)
    
    if [[ -n $i2p_port ]]; then
        echo -e "${GREEN}[FOUND]${NC} I2P main port: $i2p_port"
        
        # Open both UDP and TCP for the main I2P port (IPv4 + IPv6)
        echo -e "${BLUE}[INFO]${NC} Opening I2P port $i2p_port (UDP/TCP) for IPv4 + IPv6..."
        
        # IPv4
        iptables -A INPUT -p udp --dport "$i2p_port" -j ACCEPT
        iptables -A INPUT -p tcp --dport "$i2p_port" -j ACCEPT
        iptables -A OUTPUT -p udp --sport "$i2p_port" -j ACCEPT
        iptables -A OUTPUT -p tcp --sport "$i2p_port" -j ACCEPT
        
        # IPv6
        if command -v ip6tables >/dev/null 2>&1; then
            ip6tables -A INPUT -p udp --dport "$i2p_port" -j ACCEPT
            ip6tables -A INPUT -p tcp --dport "$i2p_port" -j ACCEPT
            ip6tables -A OUTPUT -p udp --sport "$i2p_port" -j ACCEPT
            ip6tables -A OUTPUT -p tcp --sport "$i2p_port" -j ACCEPT
        fi
        
        echo -e "${GREEN}[SUCCESS]${NC} I2P port $i2p_port configured"
    else
        echo -e "${YELLOW}[WARNING]${NC} I2P port not found in config files."
        echo "Please check I2P console: http://127.0.0.1:7657/confignet"
        echo "Then manually run: sudo $0 open <port_number>"
    fi
    
    # Configure SNTP (time synchronization) for IPv4 + IPv6
    echo -e "${BLUE}[INFO]${NC} Configuring time synchronization for IPv4 + IPv6..."
    # IPv4
    iptables -A OUTPUT -p udp --dport 123 -j ACCEPT
    iptables -A INPUT -p udp --sport 123 -m state --state ESTABLISHED -j ACCEPT
    # IPv6
    if command -v ip6tables >/dev/null 2>&1; then
        ip6tables -A OUTPUT -p udp --dport 123 -j ACCEPT
        ip6tables -A INPUT -p udp --sport 123 -m state --state ESTABLISHED -j ACCEPT
    fi
    
    # Configure DNS for IPv4 + IPv6
    echo -e "${BLUE}[INFO]${NC} Configuring DNS access for IPv4 + IPv6..."
    # IPv4
    iptables -A OUTPUT -p udp --dport 53 -j ACCEPT
    iptables -A OUTPUT -p tcp --dport 53 -j ACCEPT
    iptables -A INPUT -p udp --sport 53 -m state --state ESTABLISHED -j ACCEPT
    iptables -A INPUT -p tcp --sport 53 -m state --state ESTABLISHED -j ACCEPT
    # IPv6
    if command -v ip6tables >/dev/null 2>&1; then
        ip6tables -A OUTPUT -p udp --dport 53 -j ACCEPT
        ip6tables -A OUTPUT -p tcp --dport 53 -j ACCEPT
        ip6tables -A INPUT -p udp --sport 53 -m state --state ESTABLISHED -j ACCEPT
        ip6tables -A INPUT -p tcp --sport 53 -m state --state ESTABLISHED -j ACCEPT
    fi
    
    # Secure localhost-only ports for IPv4 + IPv6
    echo -e "${BLUE}[INFO]${NC} Securing localhost-only ports for IPv4 + IPv6..."
    for port in "${FORBIDDEN_PORTS[@]}"; do
        # IPv4 - Allow localhost access only
        iptables -A INPUT -p tcp --dport "$port" -s 127.0.0.1 -j ACCEPT
        iptables -A INPUT -p udp --dport "$port" -s 127.0.0.1 -j ACCEPT
        # IPv4 - Block external access
        iptables -A INPUT -p tcp --dport "$port" -j DROP
        iptables -A INPUT -p udp --dport "$port" -j DROP
        
        # IPv6 - Allow localhost access only
        if command -v ip6tables >/dev/null 2>&1; then
            ip6tables -A INPUT -p tcp --dport "$port" -s ::1 -j ACCEPT
            ip6tables -A INPUT -p udp --dport "$port" -s ::1 -j ACCEPT
            # IPv6 - Block external access
            ip6tables -A INPUT -p tcp --dport "$port" -j DROP
            ip6tables -A INPUT -p udp --dport "$port" -j DROP
        fi
    done
    
   # Save iptables rules (IPv4 + IPv6)
   if command -v iptables-save >/dev/null 2>&1; then
       if [[ -d /etc/iptables ]]; then
           iptables-save > /etc/iptables/rules.v4
           # Save IPv6 rules too
           if command -v ip6tables-save >/dev/null 2>&1; then
               ip6tables-save > /etc/iptables/rules.v6
           fi
       elif [[ -d /etc/sysconfig ]]; then
           iptables-save > /etc/sysconfig/iptables
           if command -v ip6tables-save >/dev/null 2>&1; then
               ip6tables-save > /etc/sysconfig/ip6tables
           fi
       else
           mkdir -p /etc/iptables
           iptables-save > /etc/iptables/rules.v4
           if command -v ip6tables-save >/dev/null 2>&1; then
               ip6tables-save > /etc/iptables/rules.v6
           fi
       fi
       echo -e "${BLUE}[INFO]${NC} Firewall rules saved (IPv4 + IPv6, persistent)"
   fi
    
    echo -e "${GREEN}[SUCCESS]${NC} I2P network configuration completed!"
    echo -e "${YELLOW}[INFO]${NC} Restart I2P router and check network status."
    echo -e "${YELLOW}[INFO]${NC} If still firewalled, check your router's port forwarding settings."
}

# Show current port status
show_port_status() {
    echo -e "${BLUE}=== CURRENT PORT STATUS ===${NC}"
    echo ""
    
    echo -e "${YELLOW}IPv4 Open ports:${NC}"
    iptables -L INPUT -n | grep "ACCEPT" | grep -E "dpt:[0-9]+" | while read line; do
        port=$(echo "$line" | grep -oE "dpt:[0-9]+" | cut -d':' -f2)
        protocol=$(echo "$line" | awk '{print $1}')
        echo "  - Port $port ($protocol IPv4)"
    done
    
    # Show IPv6 ports if ip6tables is available
    if command -v ip6tables >/dev/null 2>&1; then
        echo ""
        echo -e "${YELLOW}IPv6 Open ports:${NC}"
        ip6tables -L INPUT -n | grep "ACCEPT" | grep -E "dpt:[0-9]+" | while read line; do
            port=$(echo "$line" | grep -oE "dpt:[0-9]+" | cut -d':' -f2)
            protocol=$(echo "$line" | awk '{print $1}')
            echo "  - Port $port ($protocol IPv6)"
        done
    fi
    
    echo ""
    echo -e "${RED}Security protected ports (localhost only):${NC}"
    for port in "${FORBIDDEN_PORTS[@]}"; do
        echo "  - Port $port (I2P critical)"
    done
    
    echo ""
    local i2p_port=$(get_i2p_port)
    if [[ -n $i2p_port ]]; then
        echo -e "${GREEN}I2P main port: $i2p_port${NC}"
    else
        echo -e "${YELLOW}I2P port not found${NC}"
    fi
}

# Security check
security_check() {
    echo -e "${BLUE}=== SECURITY CHECK (IPv4 + IPv6) ===${NC}"
    echo ""
    
    local security_issues=0
    
    # Check IPv4 forbidden ports
    echo -e "${YELLOW}Checking IPv4 forbidden ports...${NC}"
    for port in "${FORBIDDEN_PORTS[@]}"; do
        if iptables -L INPUT -n | grep -q "ACCEPT.*dpt:$port" && ! iptables -L INPUT -n | grep "ACCEPT.*dpt:$port" | grep -q "127.0.0.1"; then
            echo -e "${RED}[SECURITY ISSUE]${NC} IPv4 Port $port is open to internet!"
            security_issues=$((security_issues + 1))
        fi
    done
    
    # Check IPv6 forbidden ports if ip6tables is available
    if command -v ip6tables >/dev/null 2>&1; then
        echo -e "${YELLOW}Checking IPv6 forbidden ports...${NC}"
        for port in "${FORBIDDEN_PORTS[@]}"; do
            if ip6tables -L INPUT -n | grep -q "ACCEPT.*dpt:$port" && ! ip6tables -L INPUT -n | grep "ACCEPT.*dpt:$port" | grep -q "::1"; then
                echo -e "${RED}[SECURITY ISSUE]${NC} IPv6 Port $port is open to internet!"
                security_issues=$((security_issues + 1))
            fi
        done
    fi
    
    if [[ $security_issues -eq 0 ]]; then
        echo -e "${GREEN}[SECURE]${NC} Security check passed - no critical ports exposed to internet (IPv4 + IPv6)"
    else
        echo -e "${RED}[WARNING]${NC} $security_issues security issues detected!"
    fi
}

# Show menu
show_menu() {
    echo ""
    echo -e "${BLUE}========================================${NC}"
    echo -e "${BLUE}         I2P Port Manager               ${NC}"
    echo -e "${BLUE}========================================${NC}"
    echo ""
    echo "1) Open port"
    echo "2) Close port"
    echo "3) I2P automatic configuration"
    echo "4) Show port status"
    echo "5) Security check"
    echo "6) Show forbidden ports"
    echo "7) Clear firewall rules"
    echo "8) I2P diagnostics & port detection"
    echo "0) Exit"
    echo ""
}

# Show forbidden ports
show_forbidden_ports() {
    echo -e "${RED}=== FORBIDDEN PORTS ===${NC}"
    echo "These ports CANNOT be opened to internet for SECURITY reasons:"
    echo ""
    echo "7657 - I2P console (localhost only)"
    echo "9150 - Tor SOCKS port (localhost only)"  
    echo "4444 - I2P HTTP proxy (localhost only)"
    echo "4445 - I2P HTTPS proxy (localhost only)"
    echo "7654 - I2P client port (localhost only)"
    echo "7652 - HTTP TCP event listener"
    echo "7653 - UPnP SSDP UDP listener"
    echo "7655 - SAM bridge UDP"
    echo "7656 - SAM bridge"
    echo "6668 - IRC proxy"
    echo "2827 - BOB bridge"
    echo "1900 - UPnP SSDP multicast"
    echo ""
    echo -e "${YELLOW}NEVER SHARE these ports with anyone!${NC}"
}

# I2P diagnostics and port detection
i2p_diagnostics() {
    echo -e "${BLUE}=== I2P DIAGNOSTICS ===${NC}"
    echo ""
    
    # Check if I2P is running
    echo -e "${YELLOW}Checking I2P status...${NC}"
    if pgrep -f "i2p" >/dev/null 2>&1 || pgrep -f "I2P" >/dev/null 2>&1; then
        echo -e "${GREEN}✓ I2P process is running${NC}"
    else
        echo -e "${RED}✗ I2P process not found${NC}"
        echo "  Please start I2P first"
    fi
    
    # Check I2P console accessibility
    echo ""
    echo -e "${YELLOW}Checking I2P console...${NC}"
    if curl -s --connect-timeout 3 http://127.0.0.1:7657/ >/dev/null 2>&1; then
        echo -e "${GREEN}✓ I2P console accessible at http://127.0.0.1:7657/${NC}"
    else
        echo -e "${RED}✗ I2P console not accessible${NC}"
        echo "  Check if I2P is running and port 7657 is open"
    fi
    
    # Port detection
    echo ""
    echo -e "${YELLOW}Detecting I2P ports...${NC}"
    local detected_port=$(get_i2p_port)
    if [[ -n $detected_port ]]; then
        echo -e "${GREEN}✓ Found I2P port: $detected_port${NC}"
        
        # Check if port is open in firewall
        if iptables -L INPUT -n | grep -q "ACCEPT.*dpt:$detected_port"; then
            echo -e "${GREEN}✓ Port $detected_port is open in firewall${NC}"
        else
            echo -e "${RED}✗ Port $detected_port is NOT open in firewall${NC}"
            echo "  Run option 3 to configure firewall"
        fi
        
        # Check if port is listening
        if netstat -tulpn 2>/dev/null | grep -q ":$detected_port "; then
            echo -e "${GREEN}✓ Port $detected_port is listening${NC}"
        else
            echo -e "${YELLOW}? Port $detected_port not found in netstat${NC}"
        fi
    else
        echo -e "${RED}✗ Could not detect I2P port${NC}"
        echo "  Check I2P console: http://127.0.0.1:7657/confignet"
    fi
    
    # Check config files
    echo ""
    echo -e "${YELLOW}Checking I2P config files...${NC}"
    local config_found=false
    local i2p_config_paths=(
        "/opt/i2p/router.config"
        "/usr/share/i2p/router.config"
        "/home/$USER/.i2p/router.config"
        "/var/lib/i2p/i2p-config/router.config"
        "/etc/i2p/router.config"
    )
    
    for config_path in "${i2p_config_paths[@]}"; do
        for actual_path in $config_path; do
            if [[ -f "$actual_path" ]]; then
                echo -e "${GREEN}✓ Found config: $actual_path${NC}"
                config_found=true
            fi
        done
    done
    
    if [[ $config_found == false ]]; then
        echo -e "${RED}✗ No I2P config files found${NC}"
        echo "  I2P may not be properly installed"
    fi
    
    # Network connectivity test
    echo ""
    echo -e "${YELLOW}Testing network connectivity...${NC}"
    if ping -c 1 8.8.8.8 >/dev/null 2>&1; then
        echo -e "${GREEN}✓ Internet connectivity OK${NC}"
    else
        echo -e "${RED}✗ No internet connectivity${NC}"
    fi
    
    # DNS test - try multiple methods
    if command -v nslookup >/dev/null 2>&1 && nslookup google.com >/dev/null 2>&1; then
        echo -e "${GREEN}✓ DNS resolution OK (nslookup)${NC}"
    elif command -v dig >/dev/null 2>&1 && dig google.com >/dev/null 2>&1; then
        echo -e "${GREEN}✓ DNS resolution OK (dig)${NC}"
    elif command -v host >/dev/null 2>&1 && host google.com >/dev/null 2>&1; then
        echo -e "${GREEN}✓ DNS resolution OK (host)${NC}"
    elif getent hosts google.com >/dev/null 2>&1; then
        echo -e "${GREEN}✓ DNS resolution OK (getent)${NC}"
    else
        echo -e "${YELLOW}? DNS resolution test inconclusive${NC}"
        echo "  This might be a false positive - network may still work"
    fi
    
    # I2P Network Status Analysis
    echo ""
    echo -e "${BLUE}=== I2P NETWORK STATUS ANALYSIS ===${NC}"
    if curl -s --connect-timeout 5 http://127.0.0.1:7657/ >/dev/null 2>&1; then
        # Try to extract network status from I2P console if possible
        local network_status=$(curl -s --connect-timeout 3 http://127.0.0.1:7657/ 2>/dev/null | grep -i "network.*:" | head -1 | cut -d':' -f2 | tr -d ' ' 2>/dev/null || echo "unknown")
        if [[ -n $network_status && $network_status != "unknown" ]]; then
            if echo "$network_status" | grep -qi "firewalled"; then
                echo -e "${YELLOW}⚠ I2P shows network as: FIREWALLED${NC}"
                echo -e "${BLUE}[INFO]${NC} This might be a FALSE POSITIVE because:"
                echo "  • I2P's firewall detection is not 100% reliable"
                echo "  • Detection can take 5-10 minutes after configuration"
                echo "  • Some NAT types always show as firewalled"
                echo "  • I2P can still work normally even when showing firewalled"
            else
                echo -e "${GREEN}✓ I2P network status: $network_status${NC}"
            fi
        fi
    fi
    
    echo ""
    echo -e "${BLUE}=== RECOMMENDATIONS ===${NC}"
    if [[ -n $detected_port ]]; then
        echo "1. I2P port detected: $detected_port"
        echo "2. Run option 3 to configure firewall if not done already"
        echo "3. Check router/modem port forwarding for port $detected_port"
        echo "4. Restart I2P after firewall configuration"
        echo "5. Wait 5-10 minutes for I2P to detect network changes"
        echo "6. Even if showing 'firewalled', I2P may still work normally"
    else
        echo "1. Start I2P if not running"
        echo "2. Check I2P console at http://127.0.0.1:7657/confignet"
        echo "3. Note the port number and run: sudo $0 open <port>"
    fi
}

# Clear firewall rules (IPv4 + IPv6)
clear_firewall() {
    echo -e "${YELLOW}[WARNING]${NC} All iptables rules (IPv4 + IPv6) will be deleted. Type 'YES' to continue:"
    read -r confirm
    
    if [[ $confirm == "YES" ]]; then
        # Clear IPv4 rules
        iptables -F
        iptables -X
        iptables -t nat -F
        iptables -t nat -X
        iptables -t mangle -F
        iptables -t mangle -X
        iptables -P INPUT ACCEPT
        iptables -P FORWARD ACCEPT
        iptables -P OUTPUT ACCEPT
        
        # Clear IPv6 rules if available
        if command -v ip6tables >/dev/null 2>&1; then
            ip6tables -F
            ip6tables -X
            ip6tables -t nat -F 2>/dev/null || true
            ip6tables -t nat -X 2>/dev/null || true
            ip6tables -t mangle -F
            ip6tables -t mangle -X
            ip6tables -P INPUT ACCEPT
            ip6tables -P FORWARD ACCEPT
            ip6tables -P OUTPUT ACCEPT
        fi
        
        echo -e "${GREEN}[SUCCESS]${NC} Firewall rules cleared (IPv4 + IPv6)"
    else
        echo -e "${BLUE}[CANCELLED]${NC} Operation cancelled"
    fi
}

# Main program
main() {
    check_root
    
    while true; do
        show_menu
        echo -n "Make your choice: "
        read -r choice
        
        case $choice in
            1)
                echo -n "Port number to open: "
                read -r port
                echo -n "Protocol (tcp/udp/both) [both]: "
                read -r protocol
                protocol=${protocol:-both}
                open_port "$port" "$protocol"
                ;;
            2)
                echo -n "Port number to close: "
                read -r port
                echo -n "Protocol (tcp/udp/both) [both]: "
                read -r protocol
                protocol=${protocol:-both}
                close_port "$port" "$protocol"
                ;;
            3)
                setup_i2p_ports
                ;;
            4)
                show_port_status
                ;;
            5)
                security_check
                ;;
            6)
                show_forbidden_ports
                ;;
            7)
                clear_firewall
                ;;
            8)
                i2p_diagnostics
                ;;
            0)
                echo -e "${GREEN}[INFO]${NC} Closing I2P Port Manager..."
                exit 0
                ;;
            *)
                echo -e "${RED}[ERROR]${NC} Invalid choice: $choice"
                ;;
        esac
        
        echo ""
        echo "Press Enter to continue..."
        read -r
    done
}

# Command line arguments check
if [[ $# -gt 0 ]]; then
    case $1 in
        "open")
            if [[ $# -eq 3 ]]; then
                open_port "$2" "$3"
            elif [[ $# -eq 2 ]]; then
                open_port "$2"
            else
                echo "Usage: $0 open <port> [protocol]"
                exit 1
            fi
            ;;
        "close")
            if [[ $# -eq 3 ]]; then
                close_port "$2" "$3"
            elif [[ $# -eq 2 ]]; then
                close_port "$2"
            else
                echo "Usage: $0 close <port> [protocol]"
                exit 1
            fi
            ;;
        "setup")
            setup_i2p_ports
            ;;
        "status")
            show_port_status
            ;;
        "check")
            security_check
            ;;
        "help"|"-h"|"--help")
            echo "I2P Port Manager v1.0"
            echo ""
            echo "Usage:"
            echo "  $0                    - Interactive menu"
            echo "  $0 open <port>        - Open port"
            echo "  $0 close <port>       - Close port"
            echo "  $0 setup              - I2P automatic configuration"
            echo "  $0 status             - Show port status"
            echo "  $0 check              - Security check"
            echo ""
            ;;
        *)
            echo -e "${RED}[ERROR]${NC} Unknown command: $1"
            echo "For help: $0 help"
            exit 1
            ;;
    esac
else
    main
fi